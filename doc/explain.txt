


## HOW RENDERABLES WORK

They are things that describe some unique feauture (or a small class of features) in one file, without having separate meta in sources, style layers etc.

{
	id,
	get_features,
	style_layers: []
}

They are frontend-only for now.
They used to be "isomorphic" - they were tiled on build.
It wasn't clear how benefitial it was (unique features mustn't be too many, and performance impact must be small)
Plus, the isomorphic way had many caveats:
	1) the main caveat is unintentional (and SILENT) import of some heavy build-only modules to frontend.
	This is uncontrollable because such imports can be somewhere very deep and so even extreme caution won't help.
	Renderables were not the only source of such imports but by far the biggest source
	2) non-silent breaking import: "window" imported in build, "fs" imported to frontend etc.
	Although an error is seen right away, it's usually hard to debug it and tell where the import is exactly.
	3) Perhaps not the biggest flaw but the decisive problem that made me switch to frontend was:
		I needed a knowledge of whether a building is "dead", and this was based solely on whether a building is listed in "dead_something.geojson",
		and this knowledge was hard to transfer to frontend too. (Extracting it from tiles is deeply problematic, etc).
		So, it turned out to be cleaner to keep data closer to frontend. If it's lightweight, why not.

How they work
Each renderable's features are put in the single geojson source, generated on frontend.
Renderable's id is saved in each feature's "renderable_id" prop, and this is used to filter feats in style_layers.

Currently in renderables it's impossible to derive renderable's features from osm geojson or custom geojson, because these jsons are build-only.






## HOW TITLES POINTS ARE (CAN BE) MADE

In tiling_config, add item by calling get_titles_points_tiling_settings(...),
it contains feature filter and feature transform that will be applied in generate_tiles,
matching geojson features from "main_geojson" to titles from handmade data,
and making a Point features for every match.
This will however make Point only for features that happen to be in main_geojson but some titled features will be elsewhere,
e.g. features made from renderables won't get points automatically (unless renderable.get_features gets them from main_geojson).
Renderable's get_features can take care of that, generating title points for polygons
(like it's done for dead buildings and unesco areas).







Why I decide against rendering text along linestrings (with curves, like for rivers)
	Because it's behaving wildly,
	Disappearing at various zoom levels, and it's impossible to control
	This is not the case when symbol (text) is drawn for a point.
	Behaviour of linestring is perhaps due to insufficient space,
		and this space is perhaps defined per-tile,
		and so the space is limited not by the whole linestring
			but by its portion in a certain tile.
			Very annoying





Features come from:
	OSM
	/static_data:
		bulk,
		custom_features,
	renderables

Tile layers come from
	city_assets.tiling_config
	"general_tile_layers_meta":
		city bulk
		boring bldgs

Style layers come from
	zoom_order -> drawing_layers
	"simple" layers defined in style.mjs
	renderables
	layers for selected building